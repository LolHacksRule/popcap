# -*- coding: utf-8 -*-
# -*- python -*-
# Author: Luo Jinghua

import os
import sys
import configs
import game

Import(['env', 'gameenv'])

env = env.Clone()
srcdir = Dir('.').srcnode().abspath

srcs = ["Buffer.cpp", "ButtonWidget.cpp", "Checkbox.cpp", "Common.cpp",
        "CritSect.cpp", "CursorWidget.cpp", "Debug.cpp", "DescParser.cpp",
        "DialogButton.cpp", "Dialog.cpp", "EditWidget.cpp", "Flags.cpp",
        "Font.cpp", "NativeFont.cpp", "Color.cpp", "Graphics.cpp", "HTTPTransfer.cpp",
        "HyperlinkWidget.cpp", "Image.cpp", "ImageFont.cpp", "Insets.cpp",
        "KeyCodes.cpp", "ListWidget.cpp", "MemoryImage.cpp", "ModVal.cpp",
        "MTRand.cpp", "MusicInterface.cpp", "NativeDisplay.cpp", "PerfTimer.cpp",
        "PropertiesParser.cpp", "Quantize.cpp", "Ratio.cpp", "ResourceManager.cpp",
        "ScrollbarWidget.cpp", "ScrollbuttonWidget.cpp", "SEHCatcher.cpp",
        "SexyAppBase.cpp", "SexyMatrix.cpp", "SharedImage.cpp", "Slider.cpp",
        "SWTri.cpp", "TextWidget.cpp", "WidgetContainer.cpp", "Widget.cpp",
        "WidgetManager.cpp", "XMLParser.cpp", 'SexyUtf8.cpp',
        'DriverFactory.cpp', 'VideoDriverFactory.cpp', 'SoundDriverFactory.cpp',
        'InputInterface.cpp', 'InputDriverFactory.cpp', 'InputManager.cpp',
        'ModuleLoader.cpp', 'ModuleManager.cpp', 'SexyTimer.cpp', 'SexyThread.cpp',
        'SexyDebug.cpp', 'SexyI18n.cpp', 'SexyLang.cpp']

### uniconv
srcs += map(lambda f:os.path.join ('uniconv', f),
            ['codecs_cn.c', 'codecs_hk.c',  'codecs_iso2022.c',
             'codecs_jp.c', 'codecs_kr.c',  'codecs_tw.c',
             'multibytecodec.c', 'singlebytetables.c', 'singlebytecodec.c',
             'uniconv.c', 'charsetalias.c', 'unicode.c', 'converter.c',
             'tableconverter.c', 'utfconverter.c'])
srcs += Glob(os.path.join ('uniconv', '*-table.c'))
env.AppendUnique(CPPPATH = ['uniconv'])

srcs += ['RegistryInterface.cpp', 'RegistryInterfaceFactory.cpp',
         'XMLWriter.cpp']
if env['TARGET_OS'] == 'win32':
    srcs += ['Win32RegistryInterface.cpp']
    env.AppendUnique(LIBS = ['advapi32'])
    if gameenv['static']:
       gameenv.AppendUnique(LIBS = ['advapi32'])
elif env['TARGET_OS'] == 'darwin':
    srcs += ['DarwinRegistryInterface.cpp']
else:
    srcs += ['XMLRegistryInterface.cpp']

#dummy sound manager
srcs += ["DummySoundManager.cpp", "DummySoundInstance.cpp"]

if 'DIRECTFB' in env['DRIVERS']:
    srcs += ["DFBImage.cpp", "DFBFont.cpp", "DFBDisplay.cpp"]
    env['DIRECTFB']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_DFB_DRIVER'])

if 'AGL' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDisplay.cpp"]
    srcs += ["AGLDisplay.mm"]
    env['AGL']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_AGL_DRIVER'])

if 'EAGL' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDisplay.cpp"]
    srcs += ["EAGLDisplay.mm", "EAGLView.m", "EAGLES1Renderer.m"]
    env['EAGL']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_EAGL_DRIVER', 'SEXY_OPENGLES'])

if 'GLX' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDisplay.cpp"]
    srcs += ["GLXDisplay.cpp"]
    env['GLX']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_GLX_DRIVER'])

if 'WGL' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDisplay.cpp"]
    srcs += ["WGLDisplay.cpp"]
    env['WGL']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_WGL_DRIVER'])

if 'CEGLES' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDislay.cpp"]
    srcs += ["CEGLESDisplay.cpp"]
    env['CEGLES']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_CEGLES_DRIVER'])

if 'XGLES' in env['DRIVERS']:
    srcs += ["GLImage.cpp", "GLDisplay.cpp"]
    srcs += ["XGLESDisplay.cpp"]
    env['XGLES']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_XGLES_DRIVER'])

if 'LINUXINPUT' in env['DRIVERS']:
    srcs += ["LinuxInputDriver.cpp"]
    env['LINUXINPUT']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_LINUX_INPUT_DRIVER'])

if 'UDPINPUT' in env['DRIVERS']:
    srcs += ["UdpInputDriver.cpp"]
    env['UDPINPUT']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_UDP_INPUT_DRIVER'])

if 'GSTSOUND' in env['DRIVERS']:
    srcs += ["GstSoundManager.cpp", 'GstSoundInstance.cpp',
             'GstMusicInterface.cpp', 'GstPakSrc.cpp']
    env['GSTSOUND']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_GST_SOUND_DRIVER'])

if 'AUDIERESOUND' in env['DRIVERS']:
    srcs += ["AudiereSoundManager.cpp", 'AudiereSoundInstance.cpp',
             'AudiereMusicInterface.cpp', 'AudiereLoader.cpp',
             'AudierePakFile.cpp']
    env['AUDIERESOUND']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_AUDIERE_SOUND_DRIVER'])
    configs.EnablePackage(env, 'audiere')

if env['TARGET_OS'] == 'win32':
    srcs += ["DSoundManager.cpp", 'DSoundInstance.cpp',
             'BassMusicInterface.cpp', 'BassLoader.cpp']
    ogg_srcs = 	['framing.c', 'bitwise.c']
    ogg_srcs += ['mdct.c', 'smallft.c', 'block.c', 'envelope.c', 'window.c', 'lsp.c',
                 'lpc.c', 'analysis.c', 'synthesis.c', 'psy.c', 'info.c',
                 'floor1.c', 'floor0.c', 'res0.c', 'mapping0.c', 'registry.c',
                 'codebook.c', 'sharedbook.c', 'lookup.c', 'bitrate.c']
    ogg_srcs += ['vorbisfile.c']

    #srcs += map(lambda f:os.path.join ('ogg', f), ogg_srcs)
    srcs += Glob('ogg/*.c')
    env.AppendUnique(LIBS = ['winmm'])
    gameenv.AppendUnique(LIBS = ['winmm'])
    env.AppendUnique(CPPDEFINES = ['SEXY_DIRECT_SOUND_DRIVER'])
    game.AddExtraInstallableObject(gameenv, [os.path.join(srcdir, 'bass.dll')])

if 'POSIX_MODULE_LOADER' in env['LOADERS']:
    srcs += ["PosixModuleLoader.cpp"]
    env['POSIX_MODULE_LOADER']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_POSIX_MODULE_LOADER'])

if 'WIN32_MODULE_LOADER' in env['LOADERS']:
    srcs += ["Win32ModuleLoader.cpp"]
    env['WIN32_MODULE_LOADER']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_WIN32_MODULE_LOADER'])

#c module input driver
# srcs += ['ModuleInputDriver.cpp']

if 'FREETYPEFONT' in env['DRIVERS']:
    freetype_srcs = ["FreeTypeFontMap.cpp", 'FreeTypeBaseFont.cpp',
                     'FreeTypeScaledFont.cpp', 'FreeTypeFont.cpp']
    srcs += freetype_srcs
    env['FREETYPEFONT']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_FREETYPE_FONT'])
    configs.EnablePackage(env, 'freetype')

if not env['keyboard']:
    env.AppendUnique(CPPDEFINES = ['SEXY_NO_KEYBOARD'])

env.PrependUnique(CPPPATH = ['#ImageLib', '#PakLib',
                             '#SexyAppFramework'],
                  LIBPATH = [os.path.join('$top_builddir', 'ImageLib'),
                             os.path.join('$top_builddir', 'PakLib')],
                  LIBS = ['ImageLib', 'PakLib'])

if env['TARGET_OS'] == 'win32':
    env.AppendUnique(LIBS = ['ws2_32'])

if gameenv['static']:
    if 'DIRECTFB' in env['DRIVERS']:
        gameenv['DIRECTFB']['ENABLE'](gameenv)
    if 'AGL' in env['DRIVERS']:
        gameenv['AGL']['ENABLE'](gameenv)
    if 'EAGL' in env['DRIVERS']:
        gameenv['EAGL']['ENABLE'](gameenv)
    if 'GLX' in env['DRIVERS']:
        gameenv['GLX']['ENABLE'](gameenv)
    if 'WGL' in env['DRIVERS']:
        gameenv['WGL']['ENABLE'](gameenv)
    if 'CEGLES' in env['DRIVERS']:
        gameenv['CEGLES']['ENABLE'](gameenv)
    if 'XGLES' in env['DRIVERS']:
        gameenv['XGLES']['ENABLE'](gameenv)
    if 'LINUXINPUT' in env['DRIVERS']:
        gameenv['LINUXINPUT']['ENABLE'](gameenv)
    if 'GSTSOUND' in env['DRIVERS']:
        gameenv['GSTSOUND']['ENABLE'](gameenv)
    if 'AUDIERESOUND' in env['DRIVERS']:
        gameenv['AUDIERESOUND']['ENABLE'](gameenv)
        configs.EnablePackage(gameenv, 'audiere')

    if 'POSIXMODULELOADER' in env['LOADERS']:
        gameenv['POSIXMODULELOADER']['ENABLE'](gameenv)

    if 'FREETYPEFONT' in env['DRIVERS']:
        gameenv['FREETYPEFONT']['ENABLE'](gameenv)
        configs.EnablePackage(gameenv, 'freetype')

    gameenv.PrependUnique(LIBS = ['ImageLib', 'PakLib'])

    if env['TARGET_OS'] == 'win32':
        gameenv.AppendUnique(LIBS = ['ws2_32'])

env.AppendUnique(CPPDEFINES = ['BUILDING_SEXYFRAMEWORK'],
                 LIBS = ['$STDCXX_LIBS'])
if gameenv['static']:
    env.AppendUnique(CPPDEFINES = ['BUILDING_STATIC_SEXYFRAMEWORK'])
    gameenv.AppendUnique(CPPDEFINES = ['BUILDING_STATIC_SEXYFRAMEWORK'])
    sexy_lib = env.Library('SexyAppFramework', srcs)
else:
    sexy_lib = env.SharedLibrary('SexyAppFramework', srcs)
    game.AddExtraInstallableObject(gameenv, sexy_lib)

### sdk
header_dir = os.path.join('$sdkdir', 'include', 'SexyAppFramework')
lib_dir = os.path.join('$sdkdir', 'lib')

headers = ['FlashWidget.h', 'Font.h', 'ImageFont.h', 'SexyVector.h', 'Image.h', 'PerfTimer.h',
           'SharedImage.h', 'InputDriverFactory.h', 'Point.h', 'Slider.h',
           'Debug.h', 'InputInterface.h', 'SliderListener.h', 'DescParser.h', 'InputManager.h',
           'PropertiesParser.h', 'SmartPtr.h', 'AutoCrit.h', 'Insets.h', 'Quantize.h',
           'Ratio.h', 'SoundDriverFactory.h', 'SexyUtf8.h', 'KeyCodes.h',
           'Rect.h', 'SoundInstance.h', 'DialogButton.h', 'RegistryInterfaceFactory.h',
           'SoundManager.h', 'Buffer.h', 'Dialog.h', 'ListListener.h', 'RegistryInterface.h',
           'SWTri.h', 'ButtonListener.h', 'DialogListener.h', 'ListWidget.h',
           'SysFont.h', 'ButtonWidget.h', 'memmgr.h', 'TextWidget.h', 'DriverFactory.h',
           'MemoryImage.h', 'ResourceManager.h', 'TriVertex.h', 'Checkbox.h', 'ScrollbarWidget.h',
           'CheckboxListener.h', 'ModuleLoader.h', 'ScrollbuttonWidget.h', 'VideoDriverFactory.h',
           'Graphics.h', 'ModuleManager.h', 'ScrollListener.h', 'Color.h', 'ModVal.h', 'SEHCatcher.h',
           'WidgetContainer.h', 'Common.h', 'SexyAppBase.h', 'Widget.h',
           'CritSect.h', 'EditListener.h', 'GstSoundInstance.h', 'MTRand.h',
           'WidgetManager.h', 'CursorWidget.h', 'EditWidget.h', 'MusicInterface.h', 'SexyDebug.h',
           'XMLParser.h', 'Event.h', 'HTTPTransfer.h', 'NativeDisplay.h', 'SexyMatrix.h',
           'Flags.h', 'HyperlinkWidget.h', 'NativeFont.h', 'SexyThread.h', 'XMLWriter.h',
           'SexyI18n.h', 'SexyLang.h', 'SexyTimer.h']
sexyapp_sdk = env.Install (header_dir, headers)
sexyapp_sdk += env.Install (lib_dir, sexy_lib)
env.Alias ('sexyapp_sdk_install', sexyapp_sdk)
env.Alias ('sdk_install', sexyapp_sdk)

### linux input over udp
if env.has_key ('LUIS') and env['LUIS']:
    env = Environment ()
    env.Program ('luis', 'LinuxUdpInputServer.cpp')

### a test module
if False:
    env = Environment ()
    env.SharedLibrary ('SexyInputModule', 'TestInputModule.c')

### a test program
gameenv.Program('FontUtilsTest',
                'FontUtilsTest.cpp',
                LIBS = ['SexyAppFramework', 'ImageLib', 'PakLib'] + gameenv['LIBS'],
                LIBPATH = gameenv['LIBPATH'] +
                ['.',
                 os.path.join('$top_builddir', 'ImageLib'),
                 os.path.join('$top_builddir', 'PakLib')])

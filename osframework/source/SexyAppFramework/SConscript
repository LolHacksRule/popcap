# -*- coding: utf-8 -*-
# -*- python -*-
# Author: Luo Jinghua

import os
import sys
import configs
import game

Import(['env', 'gameenv'])

env = env.Clone()
srcdir = Dir('.').srcnode().abspath

srcs = ["Buffer.cpp", "ButtonWidget.cpp", "Checkbox.cpp",
        "Common.cpp", "CritSect.cpp", "CursorWidget.cpp", "Debug.cpp",
        'EncodingParser.cpp', "DescParser.cpp", "DialogButton.cpp",
        "Dialog.cpp", "EditWidget.cpp", "Flags.cpp", "Font.cpp",
        "NativeFont.cpp", "Color.cpp", "Graphics.cpp",
        "HTTPTransfer.cpp", "HyperlinkWidget.cpp", "Image.cpp",
        "ImageFont.cpp", "Insets.cpp", "KeyCodes.cpp",
        "ListWidget.cpp", "MemoryImage.cpp", "ModVal.cpp",
        "MTRand.cpp", "MusicInterface.cpp", "NativeDisplay.cpp",
        "PerfTimer.cpp", "PropertiesParser.cpp", "Quantize.cpp",
        "Ratio.cpp", "ResourceManager.cpp", "ScrollbarWidget.cpp",
        "ScrollbuttonWidget.cpp", "SEHCatcher.cpp", "SexyAppBase.cpp",
        "SexyMatrix.cpp", "SharedImage.cpp", "Slider.cpp",
        "SWTri.cpp", "TextWidget.cpp", "WidgetContainer.cpp",
        "Widget.cpp", "WidgetManager.cpp", "XMLParser.cpp",
        'SexyUtf8.cpp', 'DriverFactory.cpp', 'VideoDriverFactory.cpp',
        'SoundDriverFactory.cpp', 'InputInterface.cpp',
        'InputDriverFactory.cpp', 'InputManager.cpp',
        'ModuleLoader.cpp', 'ModuleManager.cpp', 'SexyTimer.cpp',
        'SexyThread.cpp', 'SexyDebug.cpp', 'SexyI18n.cpp',
        'SexyLang.cpp', 'Find.cpp', 'TextLayout.cpp', 'SexyString.cpp',
        'AndroidLogListener.cpp', 'DefaultLogListener.cpp', 'SexyLog.cpp',
        'SexyLogListener.cpp', 'SexyLogManager.cpp', 'SelectableWidget.cpp',
        'SexySocket.cpp', 'SimpleUdpLogListener.cpp']

### uniconv
srcs += map(lambda f:os.path.join ('uniconv', f),
            ['codecs_cn.c', 'codecs_hk.c',  'codecs_iso2022.c',
             'codecs_jp.c', 'codecs_kr.c',  'codecs_tw.c',
             'multibytecodec.c', 'singlebytetables.c', 'singlebytecodec.c',
             'uniconv.c', 'charsetalias.c', 'unicode.c', 'converter.c',
             'tableconverter.c', 'utfconverter.c'])
srcs += Glob(os.path.join ('uniconv', '*-table.c'))
env.AppendUnique(CPPPATH = ['#', 'uniconv'])

srcs += ['RegistryInterface.cpp', 'RegistryInterfaceFactory.cpp',
         'XMLWriter.cpp']
if env['TARGET_OS'] == 'win32':
    srcs += ['Win32RegistryInterface.cpp']
    env.AppendUnique(LIBS = ['advapi32'])
    if gameenv['static']:
       gameenv.AppendUnique(LIBS = ['advapi32'])
elif env['TARGET_OS'] == 'darwin':
    srcs += ['DarwinRegistryInterface.cpp']
else:
    srcs += ['XMLRegistryInterface.cpp']

#dummy sound manager
srcs += ["DummySoundManager.cpp", "DummySoundInstance.cpp"]

dfb_driver = {
    'src' : ["DFBImage.cpp", "DFBDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_DFB_DRIVER'],
    },
    'PACKAGES' : []
}

agl_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "AGLDisplay.mm"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_AGL_DRIVER']
    }
}

eagl_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "EAGLDisplay.mm", "EAGLView.m"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_EAGL_DRIVER', 'SEXY_OPENGLES']
    }
}

glx_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "GLXDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_GLX_DRIVER']
    }
}

xgles_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "XGLESDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_XGLES_DRIVER']
    }
}

wgl_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "WGLDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_WGL_DRIVER']
    }
}

cegles_driver = {
    'src' : ["GLImage.cpp", "GLDislay.cpp", "CEGLESDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_CEGLES_DRIVER']
     }
}

xgles_driver = {
    'src' : ["GLImage.cpp", "GLDisplay.cpp", "XGLESDisplay.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_XGLES_DRIVER']
    }
}

androidgles_driver = {
    'src' : ["GLImage.cpp", 'GLDisplay.cpp', "AndroidDisplay.cpp"],
    'PACKAGES' : ['android'],
    'flags' : {
        'CPPDEFINES' : ['SEXY_ANDROIDGLES_DRIVER']
    }
}

linuxinput_driver = {
    'src' : ["LinuxInputDriver.cpp"],
    'flags' : {
        'CPPDEFINES' : ['SEXY_LINUX_INPUT_DRIVER']
    }
}

udpinput_driver = {
    'src' : ["UdpInputDriver.cpp"],
    'CPPDEFINES' : ['SEXY_UDP_INPUT_DRIVER']
}

gstsound_driver = {
    'src' : ["GstSoundManager.cpp", 'GstSoundInstance.cpp',
             'GstMusicInterface.cpp', 'GstPakSrc.cpp'],
    'flags' : {
        'CPPDEFINES' : ['SEXY_GST_SOUND_DRIVER']
    }
}

audieresound_driver = {
    'src' : ["AudiereSoundManager.cpp", 'AudiereSoundInstance.cpp',
             'AudiereMusicInterface.cpp', 'AudiereLoader.cpp',
             'AudierePakFile.cpp'],
    'flags' : {
        'CPPDEFINES' : ['SEXY_AUDIERE_SOUND_DRIVER'],
     },
    'PACKAGES' : ['audiere']
}

openalsound_driver = {
    'src' : ["OpenALSoundManager.cpp", 'OpenALSoundInstance.cpp',
             'OpenALManager.cpp'],
    'flags' : {
        'CPPDEFINES' : ['SEXY_OPENAL_SOUND_DRIVER'],
    },
    'PACKAGES' : ['ogg']
}

freetypefont_driver = {
    'src' : ["FreeTypeFontMap.cpp", 'FreeTypeBaseFont.cpp',
             'FreeTypeScaledFont.cpp', 'FreeTypeFont.cpp'],
    'flags' : {
        'CPPDEFINES' : ['SEXY_FREETYPE_FONT'],
    },
    'PACKAGES' : ['freetype']
}

drivers = {
    'DIRECTFB' : dfb_driver,
    'AGL' : agl_driver,
    'EAGL' : eagl_driver,
    'GLX' : glx_driver,
    'XGLES' : xgles_driver,
    'WGL' : wgl_driver,
    'CEGLES' : cegles_driver,
    'XGLES' : xgles_driver,
    'ANDROIDGLES' : androidgles_driver,
    'LINUXINPUT' : linuxinput_driver,
    'UDPINPUT' : udpinput_driver,
    'AUDIERESOUND' : audieresound_driver,
    'GSTSOUND' : gstsound_driver,
    'OPENALSOUND' : openalsound_driver,
    'FREETYPEFONT' : freetypefont_driver
}

def EnableDrivers(env):
    global srcs
    for driver in env['DRIVERS']:
        if driver not in drivers:
            print "Warnings: %s isn't handled." % driver
            continue
        drivercfg = drivers[driver]
        srcs += drivercfg['src']
        env[driver]['ENABLE'](env)
        flags = drivercfg.get('flags', {})
        if flags:
            env.AppendUnique(**flags)
        packages = drivercfg.get('PACKAGES', [])
        if packages:
            configs.EnablePackages(env, packages)

EnableDrivers(env)

if env['TARGET_OS'] == 'win32':
    srcs += ["DSoundManager.cpp", 'DSoundInstance.cpp',
             'BassMusicInterface.cpp', 'BassLoader.cpp']
    env.AppendUnique(LIBS = ['winmm'])
    gameenv.AppendUnique(LIBS = ['winmm'])
    env.AppendUnique(CPPDEFINES = ['SEXY_DIRECT_SOUND_DRIVER'])
    configs.EnablePackage(env, 'ogg')
    game.AddExtraInstallableObject(gameenv, [os.path.join(srcdir, 'bass.dll')])

if 'POSIX_MODULE_LOADER' in env['LOADERS']:
    srcs += ["PosixModuleLoader.cpp"]
    env['POSIX_MODULE_LOADER']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_POSIX_MODULE_LOADER'])

if 'WIN32_MODULE_LOADER' in env['LOADERS']:
    srcs += ["Win32ModuleLoader.cpp"]
    env['WIN32_MODULE_LOADER']['ENABLE'](env)
    env.AppendUnique(CPPDEFINES = ['SEXY_WIN32_MODULE_LOADER'])

#c module input driver
# srcs += ['ModuleInputDriver.cpp']

if not env['keyboard']:
    env.AppendUnique(CPPDEFINES = ['SEXY_NO_KEYBOARD'])

env.PrependUnique(CPPPATH = ['#ImageLib', '#PakLib',
                             '#SexyAppFramework'],
                  LIBPATH = [os.path.join('$top_builddir', 'ImageLib'),
                             os.path.join('$top_builddir', 'PakLib')],
                  LIBS = ['ImageLib', 'PakLib'])

if env['TARGET_OS'] == 'win32':
    env.AppendUnique(LIBS = ['ws2_32'])

configs.EnablePackages([env, gameenv], ['zziplib', 'zlib'])

if gameenv['static']:
    for driver in env['DRIVERS']:
        gameenv[driver]['ENABLE'](gameenv)

    if 'ANDROIDGLES' in env['DRIVERS']:
        configs.EnablePackage(gameenv, 'android')
    if 'AUDIERESOUND' in env['DRIVERS']:
        configs.EnablePackage(gameenv, 'audiere')
    if 'OPENALSOUND' in env['DRIVERS']:
        configs.EnablePackage(gameenv, 'ogg', append = False)

    if 'POSIXMODULELOADER' in env['LOADERS']:
        gameenv['POSIXMODULELOADER']['ENABLE'](gameenv)

    if 'FREETYPEFONT' in env['DRIVERS']:
        configs.EnablePackage(gameenv, 'freetype')

    gameenv.PrependUnique(LIBS = ['ImageLib', 'PakLib'],
                          CPPPATH = ['#'])

    if env['TARGET_OS'] == 'win32':
        gameenv.AppendUnique(LIBS = ['ws2_32'])
        configs.EnablePackage(gameenv, 'ogg')

env.AppendUnique(CPPDEFINES = ['BUILDING_SEXYFRAMEWORK'],
                 LIBS = ['$STDCXX_LIBS'])
if gameenv['static']:
    env.AppendUnique(CPPDEFINES = ['BUILDING_STATIC_SEXYFRAMEWORK'])
    gameenv.AppendUnique(CPPDEFINES = ['BUILDING_STATIC_SEXYFRAMEWORK'])
    sexy_lib = env.ConvenienceLibrary('SexyAppFramework', srcs)
else:
    sexy_lib = env.SharedLibrary('SexyAppFramework', srcs)
    game.AddExtraInstallableObject(gameenv, sexy_lib)

### sdk
header_dir = os.path.join('$sdkdir', 'include', 'SexyAppFramework')
lib_dir = os.path.join('$sdkdir', 'lib')

headers = ['FlashWidget.h', 'Font.h', 'ImageFont.h', 'SexyVector.h',
           'Image.h', 'PerfTimer.h', 'SharedImage.h',
           'InputDriverFactory.h', 'Point.h', 'Slider.h', 'Debug.h',
           'InputInterface.h', 'SliderListener.h', 'EncodingParser.h',
           'DescParser.h', 'InputManager.h', 'PropertiesParser.h',
           'SmartPtr.h', 'AutoCrit.h', 'Insets.h', 'Quantize.h',
           'Ratio.h', 'SoundDriverFactory.h', 'SexyUtf8.h',
           'KeyCodes.h', 'Rect.h', 'SoundInstance.h',
           'DialogButton.h', 'RegistryInterfaceFactory.h',
           'SoundManager.h', 'Buffer.h', 'Dialog.h', 'ListListener.h',
           'RegistryInterface.h', 'SWTri.h', 'ButtonListener.h',
           'DialogListener.h', 'ListWidget.h', 'SysFont.h',
           'ButtonWidget.h', 'memmgr.h', 'TextWidget.h',
           'DriverFactory.h', 'MemoryImage.h', 'ResourceManager.h',
           'TriVertex.h', 'Checkbox.h', 'ScrollbarWidget.h',
           'CheckboxListener.h', 'ModuleLoader.h',
           'ScrollbuttonWidget.h', 'VideoDriverFactory.h',
           'Graphics.h', 'ModuleManager.h', 'ScrollListener.h',
           'Color.h', 'ModVal.h', 'SEHCatcher.h', 'WidgetContainer.h',
           'Common.h', 'SexyAppBase.h', 'Widget.h', 'CritSect.h',
           'EditListener.h', 'GstSoundInstance.h', 'MTRand.h',
           'WidgetManager.h', 'CursorWidget.h', 'EditWidget.h',
           'MusicInterface.h', 'SexyDebug.h', 'XMLParser.h',
           'Event.h', 'HTTPTransfer.h', 'NativeDisplay.h',
           'SexyMatrix.h', 'Flags.h', 'HyperlinkWidget.h',
           'NativeFont.h', 'SexyThread.h', 'XMLWriter.h',
           'SexyI18n.h', 'SexyLang.h', 'SexyTimer.h', 'Find.h',
           'TextLayout.h', 'SexyString.h', 'SelectableWidget.h',
           'SexySocket.h'
]

sexyapp_sdk = env.Install (header_dir, headers)
sexyapp_sdk += env.Install (lib_dir, sexy_lib)
env.Alias ('sexyapp_sdk_install', sexyapp_sdk)
env.Alias ('sdk_install', sexyapp_sdk)

### linux input over udp
if env.has_key ('LUIS') and env['LUIS']:
    env = Environment ()
    env.Program ('luis', 'LinuxUdpInputServer.cpp')

### a test module
if False:
    env = Environment ()
    env.SharedLibrary ('SexyInputModule', 'TestInputModule.c')

### a test program
gameenv.Program('FontUtilsTest',
                'FontUtilsTest.cpp',
                LIBS = ['SexyAppFramework', 'ImageLib', 'PakLib'] + gameenv['LIBS'],
                LIBPATH = gameenv['LIBPATH'] +
                ['.',
                 os.path.join('$top_builddir', 'ImageLib'),
                 os.path.join('$top_builddir', 'PakLib')])

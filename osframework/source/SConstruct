# -*- coding: utf-8 -*-
# -*- python -*-
# Author: Luo Jinghua

import os
import sys
import SCons

### configurations
opts = Variables ()

### update Variables from config_file
config_file = 'Config.py'
if opts.args.has_key('config_file') and opts.args['config_file']:
    config_file = options.args['config_file']

config_vars = {}
if os.path.exists(config_file):
    print 'Applying options from', config_file
    execfile(config_file, {}, config_vars)

### update Variable from oem's config.py
target_config_vars = {}
if opts.args.has_key('target'):
  config_file = os.path.join('oem', opts.args['oem'], opts.args['target'], 'Config.py')
  if os.path.exists(config_file):
      print 'Applying options from', config_file
      execfile(config_file, {}, target_config_vars)
  config_vars.update(target_config_vars)

### check if user is overidding target configs
for var in target_config_vars:
  if opts.args.has_key(var) and opts.args[var] != target_config_vars[var]:
    print 'Warning: overriding option \'%s\' from target with \'%s\'' % (var, opts.args[var])
config_vars.update(opts.args)
opts.args = config_vars

### check whether user selected a config
if opts.args.has_key('config'):
    config = opts.args['config']
else:
    print 'Please copy Config-example.py to Config.py. And adjust its content for'
    print 'your needs. Or, you can specify the oem and target from command line'
    print 'options, e.g:'
    print 'scons oem=hwacom target=olo release=1 strip=1'
    Exit(-1)

### prepend 'configs.' if it's necessary
configs_prefix = 'configs.'
if config[0:len(configs_prefix)] != configs_prefix:
    print "'config' option doesn't have 'configs.' prefix, prepending 'configs.'"
    config = configs_prefix + config
    opts.args['config'] = config

### Add additional options
modname = config
config = __import__ (modname)
modcomps = modname.split ('.')
for modcomp in modcomps[1:]:
  config = getattr (config, modcomp)

config.AddOptions (opts)

### set release to true, if oem and target are both specified by user
if opts.args.has_key('oem') and opts.args.has_key('target') and \
   not opts.args.has_key('release'):
    print 'Building oem specific targets, set \'release\' option to true.'
    opts.args['release'] = True

### set strip to true, if release is set by user
if not opts.args.has_key('strip') and \
       opts.args.has_key('release') and \
       opts.args['release']:
    print 'Building release targets, set the \'strip\' option to true.'
    opts.args['strip'] = True

### create scons environment
env = Environment (options = opts, ENV = os.environ,
                   tools = [ 'default', 'convlib', 'untar', 'archive',
                             'scanreplace', 'md5sum'])
config.Configure (env)
Help (opts.GenerateHelpText (env))

### options
env['options_args'] = opts.args

### dist directory
env['distdir'] = '#' + os.path.join(modname.replace('configs.', ''), 'dist')

### setup top builddir
if env['builddir']:
  builddir = os.path.join(modname.replace('configs.', ''), 'build')
else:
  builddir = ''

env['top_builddir'] = '#' + builddir

sexyenv = env.Clone ()
gameenv = env.Clone ()
gameenv['extras'] = []
gameenv['extras_objs'] = []
Export (['env', 'gameenv', 'sexyenv'])

sconscripts = [os.path.join ('ImageLib', 'SConscript')]
sconscripts += [os.path.join ('PakLib', 'SConscript')]
sconscripts += [os.path.join ('audiere', 'SConscript')]
sconscripts += [os.path.join ('freetype', 'SConscript')]

### otherdirs
otherdirs = env['otherdirs'].split(',')
for d in otherdirs:
  d = d.strip()
  if not d:
    continue
  sconscripts += [os.path.join (d, 'SConscript')]

sconscripts += [os.path.join ('SexyAppFramework', 'SConscript')]
sconscripts += [os.path.join ('demos', 'SConscript')]

def FindGames(path):
    result = []
    for root, dirs, files in os.walk(path):
      for f in files:
        if f == 'SConscript':
          result.append(os.path.join(root, f))
    return result

### find games in games directory
games = FindGames('games')
for game in games:
  if game not in sconscripts:
    sconscripts.append(game)

top_builddir = builddir
for sconscript in sconscripts:
  if env['builddir']:
    builddir = os.path.join (top_builddir, os.path.split(sconscript)[0])
    SConscript (sconscript, variant_dir = builddir, duplicate = False)
  else:
    SConscript (sconscript)

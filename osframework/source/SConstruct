# -*- coding: utf-8 -*-
# -*- python -*-
# Author: Luo Jinghua

import os
import sys
import SCons

### configurations
try:
  from Config import config
except Exception, e:
  config = 'configs'

modname = config
config = __import__ (modname)
modcomps = modname.split ('.')
for modcomp in modcomps[1:]:
  config = getattr (config, modcomp)

def createConvenienceLibBuilder (env):
  """This is a utility function that creates the ConvenienceLibrary
  Builder in an Environment if it is not there already.

  If it is already there, we return the existing one.

  Based on the stock StaticLibrary and SharedLibrary builders.
  """

  try:
    convenience_lib = env['BUILDERS']['ConvenienceLibrary']
  except KeyError:
    action_list = [ SCons.Action.Action ("$ARCOM", "$ARCOMSTR") ]
    #if env.Detect('ranlib'):
    #  ranlib_action = SCons.Action.Action("$RANLIBCOM", "$RANLIBCOMSTR")
    #  action_list.append(ranlib_action)

    convenience_lib = SCons.Builder.Builder (action = action_list,
                                             emitter = '$LIBEMITTER',
                                             prefix = '$LIBPREFIX',
                                             suffix = '$LIBSUFFIX',
                                             src_suffix = '$SHOBJSUFFIX',
                                             src_builder = 'SharedObject')
    env['BUILDERS']['ConvenienceLibrary'] = convenience_lib

    return convenience_lib

opts = Variables ('Config.py')

config.AddOptions (opts)

env = Environment (options = opts, ENV = os.environ,
                   tools = [ 'default', 'untar'])
createConvenienceLibBuilder (env)
config.Configure (env)
Help (opts.GenerateHelpText (env))

sexyenv = env.Clone ()
gameenv = env.Clone ()
Export (['env', 'gameenv', 'sexyenv'])

sconscripts = [os.path.join ('ImageLib', 'SConscript')]
sconscripts += [os.path.join ('PakLib', 'SConscript')]
sconscripts += [os.path.join ('audiere', 'SConscript')]
sconscripts += [os.path.join ('freetype', 'SConscript')]
sconscripts += [os.path.join ('SexyAppFramework', 'SConscript')]
sconscripts += [os.path.join ('demos', 'SConscript')]

otherdirs = env['otherdirs'].split(',')
for d in otherdirs:
  d = d.strip()
  if not d:
    continue
  sconscripts += [os.path.join (d, 'SConscript')]

for sconscript in sconscripts:
  if env['builddir']:
    builddir = os.path.join (modname.replace('configs', 'build'),
                             os.path.split(sconscript)[0])
    SConscript (sconscript, variant_dir = builddir, duplicate = False)
  else:
    SConscript (sconscript)

# -*- coding: utf-8 -*-
# -*- python -*-
# Author: Luo Jinghua

import os
import sys
import SCons

def createConvenienceLibBuilder(env):
  """This is a utility function that creates the ConvenienceLibrary
  Builder in an Environment if it is not there already.

  If it is already there, we return the existing one.

  Based on the stock StaticLibrary and SharedLibrary builders.
  """

  try:
    convenience_lib = env['BUILDERS']['ConvenienceLibrary']
  except KeyError:
    action_list = [ SCons.Action.Action("$ARCOM", "$ARCOMSTR") ]
    #if env.Detect('ranlib'):
    #  ranlib_action = SCons.Action.Action("$RANLIBCOM", "$RANLIBCOMSTR")
    #  action_list.append(ranlib_action)

    convenience_lib = SCons.Builder.Builder(action = action_list,
                                            emitter = '$LIBEMITTER',
                                            prefix = '$LIBPREFIX',
                                            suffix = '$LIBSUFFIX',
                                            src_suffix = '$SHOBJSUFFIX',
                                            src_builder = 'SharedObject')
    env['BUILDERS']['ConvenienceLibrary'] = convenience_lib

    return convenience_lib

env = Environment()
createConvenienceLibBuilder(env)
env.AppendUnique(CFLAGS = ['-pthread'],
                 LINKFALGS = ['-pthread'])
env.AppendUnique(CFLAGS = ['-g', '-Wall'], CXXFLAGS = ['-g', '-Wall'], LINKFLAGS = ['-g'])
Export('env')

sconscripts = [os.path.join('ImageLib', 'SConscript')]
sconscripts += [os.path.join('PakLib', 'SConscript')]
sconscripts += [os.path.join('SexyAppFramework', 'SConscript')]
sconscripts += [os.path.join('demos', 'SConscript')]

for sconscript in sconscripts:
  SConscript(sconscript)


import os
import game
import configs

from SCons.Defaults import *

Import (['env', 'gameenv'])

# don't build audiere and its dependences if it's not enabled.
if not 'AUDIERESOUND' in env['DRIVERS']:
    Return ()

sexyenv = env
srcdir = Dir('.').srcnode().abspath

audiere_name = 'audiere'
audiere_version = '1.9.4.1'
audiere_suffix = '.tar.gz'
audiere_tar = audiere_name + '-' + audiere_version + audiere_suffix
audiere_dir = audiere_name + '-' + audiere_version

tarballs = [audiere_tar]
for tarball in tarballs:
    fpath = os.path.join (srcdir, tarball)
    if not os.path.exists(fpath):
        print fpath, "doesn't exist."
        Return ()

env = env.Clone()
#env.AppendUnique (CPPPATH = ['include'], LIBPATH = ['lib'])
configs.EnablePackage(env, 'ogg', append = False)

audiere_untar = env.Untar (os.path.join (srcdir, audiere_tar))
env.SourceCode (audiere_dir, audiere_untar)

srcs = [
  'basic_source.cpp',
  'debug.cpp',
  'device.cpp',
  'device_mixer.cpp',
  'device_null.cpp',
  'dumb_resample.cpp',
  'file_ansi.cpp',
  'input.cpp',
  'input_aiff.cpp',
  'input_mp3.cpp',
  'input_wav.cpp',
  'input_ogg.cpp',
  'loop_point_source.cpp',
  'memory_file.cpp',
  'noise.cpp',
  'resampler.cpp',
  'sample_buffer.cpp',
  'sound.cpp',
  'sound_effect.cpp',
  'square_wave.cpp',
  'tone.cpp',
  'utility.cpp',
  'version.cpp'
]

srcs += [os.path.join ('mpaudec', 'mpaudec.c'),
         os.path.join ('mpaudec', 'bits.c')]

env.AppendUnique (CPPDEFINES = ['NO_FLAC', 'NO_DUMB', 'NO_SPEEX'])
env.AppendUnique (CPPDEFINES = ['AUDIERE_EXPORTS'])
env.PrependUnique (LIBPATH = ['lib'])
env.AppendUnique (LIBS = ['vorbisfile', 'vorbis', 'ogg'])

if 'win32' in env['TARGET_OS']:
    env.AppendUnique (CPPDEFINES = ['WIN32_LEAN_AND_MEAN', 'NOMINMAX',
                                    'HAVE_DSOUND'],
                      LIBS = ['winmm', 'dsound', 'ole32', 'rpcrt4',
                             'user32'])
    srcs += ['device_mm.cpp', 'midi_mci.cpp', 'cd_win32.cpp',
             'timer_win32.cpp', 'threads_win32.cpp']
    srcs += [ 'device_ds_buffer.cpp', 'device_ds_stream.cpp',
              'device_ds.cpp', 'dxguid.cpp' ]
elif 'linux' in env['TARGET_OS']:
    env.AppendUnique(CPPDEFINES = ['HAVE_ALSA'],
                     LIBS = ['asound'])
    srcs += ['device_alsa.cpp']
    srcs += ['midi_null.cpp', 'cd_null.cpp',
             'timer_posix.cpp', 'threads_posix.cpp']
elif 'darwin' in env['TARGET_OS']:
    if 'SEXY_IOS' in env['CPPDEFINES']:
        frameworks = ['CoreAudio', 'AudioToolbox']
    else:
        frameworks = ['CoreAudio', 'AudioToolbox', 'AudioUnit']
    env.AppendUnique (CPPDEFINES = ['HAVE_CORE_AUDIO'],
                      FRAMEWORKS = frameworks)
    srcs += ['device_coreaudio.cpp', 'midi_null.cpp', 'cd_null.cpp',
             'timer_posix.cpp', 'threads_posix.cpp']
else:
    srcs += ['midi_null.cpp', 'cd_null.cpp',
             'timer_posix.cpp', 'threads_posix.cpp']

sources = map(lambda f:os.path.join (audiere_dir, 'src', f), srcs)

if env['static_audiere']:
    audiere_lib = env.Library ('audiere', sources)
else:
    audiere_lib = env.SharedLibrary ('audiere', sources)

### install audiere header & library
header_dir = os.path.join('$top_builddir', 'include')
lib_dir = os.path.join('$top_builddir', 'lib')

audiere = env.Install (header_dir,
                       map(lambda f:os.path.join (audiere_dir,
                                                  'src', f),
                           ['audiere.h']))
audiere += env.Install (lib_dir, audiere_lib)
env.Alias ('audiere_install', audiere)

### sdk
header_dir = os.path.join('$sdkdir', 'include')
lib_dir = os.path.join('$sdkdir', 'lib')

audiere_sdk = env.Install (header_dir,
                           map(lambda f:os.path.join (audiere_dir,
                                                      'src', f),
                               ['audiere.h']))

audiere_sdk += env.Install (lib_dir, [audiere_lib])

env.Alias ('audiere_sdk_install', audiere_sdk)
env.Alias ('sdk_install', audiere_sdk)

### extra clean targets
env.Clean (audiere, [audiere_dir])
env.Clean (audiere, ['include', 'lib'])

### a test program
env.Program('audiere_play',
            os.path.join(audiere_dir, 'examples', 'simple', 'simple.cpp'),
            CPPPATH = [os.path.join(audiere_dir, 'src')] + env['CPPPATH'],
            LIBPATH = ['.'] + env['LIBPATH'],
            LIBS = ['audiere'] + env['LIBS'])

### setup package info
depends = []
objects = []
pkgdeps = ['ogg']
if env['static_audiere']:
    depends += ['vorbisfile', 'vorbis', 'ogg']
else:
    objects = audiere_lib
configs.SetPackageInfo([sexyenv, gameenv], 'audiere',
                       DEPENDS = pkgdeps,
                       LIBS = ['audiere'] + depends,
                       CPPPATH = [os.path.join('$top_builddir', 'include')],
                       LIBPATH = [os.path.join('$top_builddir', 'lib')],
                       OBJECTS = objects, TARGETS = audiere)
